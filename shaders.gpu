const HEADER = `
#define PI 3.1415926538
  uniform vec3      iResolution;
  uniform vec3      iColor;
  uniform float     iTime;
  uniform vec4      iMouse;
  uniform float     iCameraPos;
  uniform vec3      iLightPos;
  uniform sampler2D iChannel1; 
  uniform int       iAnimation; 
  uniform float     iAnimationPhase;

  void mainImage( out vec4 c, in vec2 f );

  out vec4 out_color;

  void main( void ){
    vec4 color = vec4(1, 0, 0, 1);
    mainImage( color, gl_FragCoord.xy );

    out_color = vec4(color.xyz, 0.5);
  }
`;

const CODE = `
#define MAX_DISTANCE 255

float maxcomp( in vec3 v ) { 
    return max( max( v.x, v.y ), v.z ); 
}

float udBox( vec3 p, vec3 b, float r ){
    return length(max(abs(p)-b,0.0))-r;
}

vec3 map( in vec3 pos )
{
	vec2  p = fract( pos.xz ); 
    vec3  m = vec3( 0, 0, 0 );
	float d = udBox( vec3(p.x-0.5,pos.y-0.5*m.x,p.y-0.5), vec3(0.3,m.x*0.5,0.3), 0.1 );
    return vec3( d, m.yz );
}

const float surface = 0.001;

vec4 trace( vec3 ro, in vec3 rd, in float tmin, in float tmax, in vec2 center )
{
    ro += tmin*rd;
    
	vec2 pos = floor(ro.xz);
    vec3 rdi = 1.0/rd;
    vec3 rda = abs(rdi);
	vec2 rds = sign(rd.xz);
	vec2 dis = (pos-ro.xz+ 0.5 + rds*0.5) * rdi.xz;
	
	vec3 res = vec3( -1.0 );

    // traverse regular grid (in 2D)
	vec2 mm = vec2(0.0);

        for( int i=0; i<1000; i++ ) 
	{

        center.y += 0.01;
        float l = length(center);
        float phase = iAnimationPhase*abs(sin(iTime*0.25));

        vec2 p = abs((center/l)*sin(l*phase-iTime*3.0));
        vec3 cub = vec3( p.x, p.y, 0 );

        if (iAnimation == 0) cub = vec3( 0, 0, 0 );

        vec2 pr = pos+0.5-ro.xz;
        vec2 mini = (pr-0.5*rds)*rdi.xz;
        float s = max( mini.x, mini.y );

        if( (tmin+s)>tmax ) break;
        
        // intersect box
		vec3  ce = vec3( pos.x+0.5, 0.5*cub.x, pos.y+0.5 );
        vec3  rb = vec3(0.3,cub.x*0.5,0.3);
        vec3  ra = rb + 0.12;
		vec3  rc = ro - ce;
        
        float tN = maxcomp( -rdi*rc - rda*ra );
        float tF = maxcomp( -rdi*rc + rda*ra );

        if( tN < tF )
        {
            // raymarch
            float s = tN;
            float h = 1.0;
            for( int j=0; j<MAX_DISTANCE; j++ )
            {
                h = udBox( rc+s*rd, rb, 0.1 ); 
                s += h;
                if( s>tF ) break;
            }

            if( h < (surface*s*2.0) )
            {
                res = vec3( s, cub.yz );
                break; 
            }
            
		}

        // step to next cell		
		mm = step( dis.xy, dis.yx ); 
		dis += mm*rda.xz;
        pos += mm*rds;
	}
    
    res.x += tmin;
    
	return vec4(res.x, res.y, res.z, mm);
}

float usmoothstep( in float x )
{
    x = clamp(x,0.0,1.0);
    return x*x*(3.0-2.0*x);
}

vec3 calcNormal( in vec3 pos, in float t )
{
    vec2 e = vec2(1.0,-1.0)*surface*t;
    return normalize( e.xyy*map( pos + e.xyy ).x + 
					  e.yyx*map( pos + e.yyx ).x + 
					  e.yxy*map( pos + e.yxy ).x + 
					  e.xxx*map( pos + e.xxx ).x );
}

vec2 boundingVolume( vec2 tminmax, in vec3 ro, in vec3 rd )
{
    float bp = 10.0;
    float tp = (bp-ro.y)/rd.y;
    if( tp>0.0 ) 
    {
        if( ro.y>bp ) tminmax.x = max( tminmax.x, tp );
        else          tminmax.y = min( tminmax.y, tp );
    }
    bp = 0.0;
    tp = (bp-ro.y)/rd.y;
    if( tp>0.0 ) 
    {
        if( ro.y>bp ) tminmax.y = min( tminmax.y, tp );
    }

    return tminmax;
}

vec3 doLighting( in vec3 col, in vec3 pos, in vec3 nor, in vec3 rd, in float index )
{
    vec3 light1 = vec3(  iLightPos.x, iLightPos.y, iLightPos.z );
    vec3 light2 = vec3( -0, 0.000,  1 );

    vec3 lpos = vec3(0.0) + 6.0*light1;

    vec3  ldif = lpos - pos;
    float llen = length( ldif );

    ldif /= llen;

	float con = dot( light1,ldif);
	float occ = mix( clamp( pos.y/4.0, 0.0, 1.0 ), 1.0, 0.2*max(0.0,nor.y) );
    vec2 sminmax = vec2(0.01, 5.0);

		
    float lkey = clamp( dot(nor,ldif), 0.0, 1.0 );
	vec3  lkat = vec3(1.0);
          lkat /= 1.0+0.25*llen*llen;		
		  lkat *= 30.0;
          
    
    float lbac = clamp( 0.5 + 0.5*dot( light2, nor ), 0.0, 1.0 );
		  lbac /= 1.0+0.2*llen*llen;		
		  lbac *= 7.0;
	float lamb = 1.0 - 0.5*nor.y;
		  lamb *= 0.25;

    vec3 lin  = 1.0*vec3(1.60,0.70,0.30)*lkey*lkat*(0.5+0.5*occ);
         lin += 1.0*vec3(0.20,0.05,0.02)*lamb*occ*occ;
         lin += 1.0*vec3(0.70,0.20,0.08)*lbac*occ*occ;
         lin *= vec3(1.3,1.1,1.0);
    
    col = col*lin;

    vec3 hal = normalize(ldif-rd);
    vec3 spe = lkey*lkat*(0.5+0.5*occ)*5.0*
               pow( clamp(dot(hal, nor),0.0,1.0), 6.0+6.0 ) * 
               (0.04+0.96*pow(clamp(1.0-dot(hal,ldif),0.0,1.0),5.0));

    col += (0.4+0.6)*spe*vec3(0.8,0.9,1.0);

    col = 1.4*col/(1.0+col);
    
    return col ;
}

mat3 setLookAt( in vec3 ro, in vec3 ta, float cr )
{
	vec3  cw = normalize(ta-ro);
	vec3  cp = vec3(sin(cr), cos(cr),0.0);
	vec3  cu = normalize( cross(cw,cp) );
	vec3  cv = normalize( cross(cu,cw) );
    return mat3( cu, cv, cw );
}

vec3 render( in vec3 ro, in vec3 rd, in vec2 xy, in vec2 center )
{
    vec3 col = vec3(0.2);

    vec2 tminmax = vec2(0.0, 40.0 );

    tminmax = boundingVolume( tminmax, ro, rd );

   // raytrace
    vec4 result = trace( ro, rd, tminmax.x, tminmax.y, center );

    vec3 res = result.xyz;
    
    if( res.y > -0.5 )
    {
        float t = res.x;
        float index = result.w;

        vec3 pos = ro + t*rd;
        vec3 nor = calcNormal( pos, t );

        // lighting
        col = doLighting( vec3(iColor), pos, nor, rd, index );
    } else {
        col += vec3(0.2, 0.25, 0.1);
    }

    return col;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{    
    float time = 5.0 + 0.1*iTime + 20.0*iMouse.x/iResolution.x;
    
    vec3 tot = vec3(0.0);
    vec2 off = vec2(0,0)/float(2);
    vec2 xy = (-iResolution.xy+2.0*(fragCoord+off)) / iResolution.y;

    float maxAxis = max(iResolution.x, iResolution.y);
    vec2 uv = fragColor.xy / maxAxis;
    vec2 center = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;

    // camera	
    vec3 ro = vec3( 8.5*cos(0.2+.33*time), iCameraPos, 12.5*sin(0.1+0.37*time) );
    vec3 ta = vec3( -2.5+3.0*cos(1.2+.41*time), 0.0, 2.0+3.0*sin(2.0+0.38*time) );
    float roll = 0.2*sin(0.1*time);

    // camera tx
    mat3 ca = setLookAt( ro, ta, roll );
    vec3 rd = normalize( ca * vec3(xy.xy,1.75) );

    vec3 col = vec3(1);

    col = render( ro, rd, xy, center );
    col = pow( col, vec3(0.4545) );
    col = pow( col, vec3(0.8,0.93,1.0) );
    tot += col;
 
            
    fragColor = vec4( tot, 1.0 );
}`;
